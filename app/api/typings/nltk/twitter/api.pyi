"""
This type stub file was generated by pyright.
"""

import time as _time
from abc import ABCMeta, abstractmethod
from datetime import tzinfo

"""
This module provides an interface for TweetHandlers, and support for timezone
handling.
"""
class LocalTimezoneOffsetWithUTC(tzinfo):
    """
    This is not intended to be a general purpose class for dealing with the
    local timezone. In particular:

    * it assumes that the date passed has been created using
      `datetime(..., tzinfo=Local)`, where `Local` is an instance of
      the object `LocalTimezoneOffsetWithUTC`;
    * for such an object, it returns the offset with UTC, used for date comparisons.

    Reference: https://docs.python.org/3/library/datetime.html
    """
    STDOFFSET = ...
    if _time.daylight:
        DSTOFFSET = ...
    else:
        DSTOFFSET = ...
    def utcoffset(self, dt):
        """
        Access the relevant time offset.
        """
        ...
    


LOCAL = ...
class BasicTweetHandler(metaclass=ABCMeta):
    """
    Minimal implementation of `TweetHandler`.

    Counts the number of Tweets and decides when the client should stop
    fetching them.
    """
    def __init__(self, limit=...) -> None:
        ...
    
    def do_continue(self):
        """
        Returns `False` if the client should stop fetching Tweets.
        """
        ...
    


class TweetHandlerI(BasicTweetHandler):
    """
    Interface class whose subclasses should implement a handle method that
    Twitter clients can delegate to.
    """
    def __init__(self, limit=..., upper_date_limit=..., lower_date_limit=...) -> None:
        """
        :param int limit: The number of data items to process in the current\
        round of processing.

        :param tuple upper_date_limit: The date at which to stop collecting\
        new data. This should be entered as a tuple which can serve as the\
        argument to `datetime.datetime`.\
        E.g. `date_limit=(2015, 4, 1, 12, 40)` for 12:30 pm on April 1 2015.

        :param tuple lower_date_limit: The date at which to stop collecting\
        new data. See `upper_data_limit` for formatting.
        """
        ...
    
    @abstractmethod
    def handle(self, data):
        """
        Deal appropriately with data returned by the Twitter API
        """
        ...
    
    @abstractmethod
    def on_finish(self):
        """
        Actions when the tweet limit has been reached
        """
        ...
    
    def check_date_limit(self, data, verbose=...):
        """
        Validate date limits.
        """
        ...
    


