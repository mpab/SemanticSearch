"""
This type stub file was generated by pyright.
"""

import threading

WORD_OR_TAG = ...
BOUNDARY = ...
CORPUS_LOADED_EVENT = ...
SEARCH_TERMINATED_EVENT = ...
SEARCH_ERROR_EVENT = ...
ERROR_LOADING_CORPUS_EVENT = ...
POLL_INTERVAL = ...
_DEFAULT = ...
_CORPORA = ...
class ConcordanceSearchView(object):
    _BACKGROUND_COLOUR = ...
    _HIGHLIGHT_WORD_COLOUR = ...
    _HIGHLIGHT_WORD_TAG = ...
    _HIGHLIGHT_LABEL_COLOUR = ...
    _HIGHLIGHT_LABEL_TAG = ...
    _FRACTION_LEFT_TEXT = ...
    def __init__(self) -> None:
        ...
    
    def set_result_size(self, **kwargs):
        ...
    
    def set_cntx_af_len(self, **kwargs):
        ...
    
    def set_cntx_bf_len(self, **kwargs):
        ...
    
    def search_enter_keypress_handler(self, *event):
        ...
    
    def previous(self):
        ...
    
    def __next__(self):
        ...
    
    def about(self, *e):
        ...
    
    def handle_error_loading_corpus(self, event):
        ...
    
    def handle_corpus_loaded(self, event):
        ...
    
    def handle_search_terminated(self, event):
        ...
    
    def handle_search_error(self, event):
        ...
    
    def corpus_selected(self, *args):
        ...
    
    def load_corpus(self, selection):
        ...
    
    def search(self):
        ...
    
    def write_results(self, results):
        ...
    
    def words_and_labels(self, sentence, pos1, pos2):
        ...
    
    def pad(self, sent, hstart, hend):
        ...
    
    def destroy(self, *e):
        ...
    
    def clear_all(self):
        ...
    
    def clear_results_box(self):
        ...
    
    def freeze_editable(self):
        ...
    
    def unfreeze_editable(self):
        ...
    
    def set_paging_button_states(self):
        ...
    
    def fire_event(self, event):
        ...
    
    def mainloop(self, *args, **kwargs):
        ...
    


class ConcordanceSearchModel(object):
    def __init__(self, queue) -> None:
        ...
    
    def non_default_corpora(self):
        ...
    
    def load_corpus(self, name):
        ...
    
    def search(self, query, page):
        ...
    
    def next(self, page):
        ...
    
    def prev(self, page):
        ...
    
    def reset_results(self):
        ...
    
    def reset_query(self):
        ...
    
    def set_results(self, page, resultset):
        ...
    
    def get_results(self):
        ...
    
    def has_more_pages(self, page):
        ...
    
    class LoadCorpus(threading.Thread):
        def __init__(self, name, model) -> None:
            ...
        
        def run(self):
            ...
        
    
    
    class SearchCorpus(threading.Thread):
        def __init__(self, model, page, count) -> None:
            ...
        
        def run(self):
            ...
        
        def processed_query(self):
            ...
        
    
    


def app():
    ...

if __name__ == "__main__":
    ...
