"""
This type stub file was generated by pyright.
"""

"""
If you use the VADER sentiment analysis tools, please cite:

Hutto, C.J. & Gilbert, E.E. (2014). VADER: A Parsimonious Rule-based Model for
Sentiment Analysis of Social Media Text. Eighth International Conference on
Weblogs and Social Media (ICWSM-14). Ann Arbor, MI, June 2014.
"""
class VaderConstants:
    """
    A class to keep the Vader lists and constants.
    """
    B_INCR = ...
    B_DECR = ...
    C_INCR = ...
    N_SCALAR = ...
    NEGATE = ...
    BOOSTER_DICT = ...
    SPECIAL_CASE_IDIOMS = ...
    REGEX_REMOVE_PUNCTUATION = ...
    PUNC_LIST = ...
    def __init__(self) -> None:
        ...
    
    def negated(self, input_words, include_nt=...):
        """
        Determine if input contains negation words
        """
        ...
    
    def normalize(self, score, alpha=...):
        """
        Normalize the score to be between -1 and 1 using an alpha that
        approximates the max expected value
        """
        ...
    
    def scalar_inc_dec(self, word, valence, is_cap_diff):
        """
        Check if the preceding words increase, decrease, or negate/nullify the
        valence
        """
        ...
    


class SentiText:
    """
    Identify sentiment-relevant string-level properties of input text.
    """
    def __init__(self, text, punc_list, regex_remove_punctuation) -> None:
        ...
    
    def allcap_differential(self, words):
        """
        Check whether just some words in the input are ALL CAPS

        :param list words: The words to inspect
        :returns: `True` if some but not all items in `words` are ALL CAPS
        """
        ...
    


class SentimentIntensityAnalyzer:
    """
    Give a sentiment intensity score to sentences.
    """
    def __init__(self, lexicon_file=...) -> None:
        ...
    
    def make_lex_dict(self):
        """
        Convert lexicon file to a dictionary
        """
        ...
    
    def polarity_scores(self, text):
        """
        Return a float for sentiment strength based on the input text.
        Positive values are positive valence, negative value are negative
        valence.
        """
        ...
    
    def sentiment_valence(self, valence, sentitext, item, i, sentiments):
        ...
    
    def score_valence(self, sentiments, text):
        ...
    


