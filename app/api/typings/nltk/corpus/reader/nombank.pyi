"""
This type stub file was generated by pyright.
"""

from functools import total_ordering
from nltk.corpus.reader.util import *
from nltk.corpus.reader.api import *

class NombankCorpusReader(CorpusReader):
    """
    Corpus reader for the nombank corpus, which augments the Penn
    Treebank with information about the predicate argument structure
    of every noun instance.  The corpus consists of two parts: the
    predicate-argument annotations themselves, and a set of "frameset
    files" which define the argument labels used by the annotations,
    on a per-noun basis.  Each "frameset file" contains one or more
    predicates, such as ``'turn'`` or ``'turn_on'``, each of which is
    divided into coarse-grained word senses called "rolesets".  For
    each "roleset", the frameset file provides descriptions of the
    argument roles, along with examples.
    """
    def __init__(self, root, nomfile, framefiles=..., nounsfile=..., parse_fileid_xform=..., parse_corpus=..., encoding=...) -> None:
        """
        :param root: The root directory for this corpus.
        :param nomfile: The name of the file containing the predicate-
            argument annotations (relative to ``root``).
        :param framefiles: A list or regexp specifying the frameset
            fileids for this corpus.
        :param parse_fileid_xform: A transform that should be applied
            to the fileids in this corpus.  This should be a function
            of one argument (a fileid) that returns a string (the new
            fileid).
        :param parse_corpus: The corpus containing the parse trees
            corresponding to this corpus.  These parse trees are
            necessary to resolve the tree pointers used by nombank.
        """
        ...
    
    def raw(self, fileids=...):
        """
        :return: the text contents of the given fileids, as a single string.
        """
        ...
    
    def instances(self, baseform=...):
        """
        :return: a corpus view that acts as a list of
        ``NombankInstance`` objects, one for each noun in the corpus.
        """
        ...
    
    def lines(self):
        """
        :return: a corpus view that acts as a list of strings, one for
        each line in the predicate-argument annotation file.
        """
        ...
    
    def roleset(self, roleset_id):
        """
        :return: the xml description for the given roleset.
        """
        ...
    
    def rolesets(self, baseform=...):
        """
        :return: list of xml descriptions for rolesets.
        """
        ...
    
    def nouns(self):
        """
        :return: a corpus view that acts as a list of all noun lemmas
        in this corpus (from the nombank.1.0.words file).
        """
        ...
    


class NombankInstance(object):
    def __init__(self, fileid, sentnum, wordnum, baseform, sensenumber, predicate, predid, arguments, parse_corpus=...) -> None:
        ...
    
    @property
    def roleset(self):
        """The name of the roleset used by this instance's predicate.
        Use ``nombank.roleset() <NombankCorpusReader.roleset>`` to
        look up information about the roleset."""
        ...
    
    def __repr__(self):
        ...
    
    def __str__(self) -> str:
        ...
    
    tree = ...
    @staticmethod
    def parse(s, parse_fileid_xform=..., parse_corpus=...):
        ...
    


class NombankPointer(object):
    """
    A pointer used by nombank to identify one or more constituents in
    a parse tree.  ``NombankPointer`` is an abstract base class with
    three concrete subclasses:

    - ``NombankTreePointer`` is used to point to single constituents.
    - ``NombankSplitTreePointer`` is used to point to 'split'
      constituents, which consist of a sequence of two or more
      ``NombankTreePointer`` pointers.
    - ``NombankChainTreePointer`` is used to point to entire trace
      chains in a tree.  It consists of a sequence of pieces, which
      can be ``NombankTreePointer`` or ``NombankSplitTreePointer`` pointers.
    """
    def __init__(self) -> None:
        ...
    


class NombankChainTreePointer(NombankPointer):
    def __init__(self, pieces) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self):
        ...
    
    def select(self, tree):
        ...
    


class NombankSplitTreePointer(NombankPointer):
    def __init__(self, pieces) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self):
        ...
    
    def select(self, tree):
        ...
    


@total_ordering
class NombankTreePointer(NombankPointer):
    """
    wordnum:height*wordnum:height*...
    wordnum:height,

    """
    def __init__(self, wordnum, height) -> None:
        ...
    
    @staticmethod
    def parse(s):
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self):
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __ne__(self, other) -> bool:
        ...
    
    def __lt__(self, other) -> bool:
        ...
    
    def select(self, tree):
        ...
    
    def treepos(self, tree):
        """
        Convert this pointer to a standard 'tree position' pointer,
        given that it points to the given tree.
        """
        ...
    


