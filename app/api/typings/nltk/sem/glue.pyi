"""
This type stub file was generated by pyright.
"""

SPEC_SEMTYPES = ...
OPTIONAL_RELATIONSHIPS = ...
class GlueFormula(object):
    def __init__(self, meaning, glue, indices=...) -> None:
        ...
    
    def applyto(self, arg):
        """ self = (\\x.(walk x), (subj -o f))
            arg  = (john        ,  subj)
            returns ((walk john),          f)
        """
        ...
    
    def make_VariableExpression(self, name):
        ...
    
    def make_LambdaExpression(self, variable, term):
        ...
    
    def lambda_abstract(self, other):
        ...
    
    def compile(self, counter=...):
        """From Iddo Lev's PhD Dissertation p108-109"""
        ...
    
    def simplify(self):
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __ne__(self, other) -> bool:
        ...
    
    def __lt__(self, other) -> bool:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self):
        ...
    


class GlueDict(dict):
    def __init__(self, filename, encoding=...) -> None:
        ...
    
    def read_file(self, empty_first=...):
        ...
    
    def __str__(self) -> str:
        ...
    
    def to_glueformula_list(self, depgraph, node=..., counter=..., verbose=...):
        ...
    
    def lookup(self, node, depgraph, counter):
        ...
    
    def add_missing_dependencies(self, node, depgraph):
        ...
    
    def get_semtypes(self, node):
        """
        Based on the node, return a list of plausible semtypes in order of
        plausibility.
        """
        ...
    
    def get_glueformulas_from_semtype_entry(self, lookup, word, node, depgraph, counter):
        ...
    
    def get_meaning_formula(self, generic, word):
        """
        :param generic: A meaning formula string containing the
        parameter "<word>"
        :param word: The actual word to be replace "<word>"
        """
        ...
    
    def initialize_labels(self, expr, node, depgraph, unique_index):
        ...
    
    def find_label_name(self, name, node, depgraph, unique_index):
        ...
    
    def get_label(self, node):
        """
        Pick an alphabetic character as identifier for an entity in the model.

        :param value: where to index into the list of characters
        :type value: int
        """
        ...
    
    def lookup_unique(self, rel, node, depgraph):
        """
        Lookup 'key'. There should be exactly one item in the associated relation.
        """
        ...
    
    def get_GlueFormula_factory(self):
        ...
    


class Glue(object):
    def __init__(self, semtype_file=..., remove_duplicates=..., depparser=..., verbose=...) -> None:
        ...
    
    def train_depparser(self, depgraphs=...):
        ...
    
    def parse_to_meaning(self, sentence):
        ...
    
    def get_readings(self, agenda):
        ...
    
    def parse_to_compiled(self, sentence):
        ...
    
    def dep_parse(self, sentence):
        """
        Return a dependency graph for the sentence.

        :param sentence: the sentence to be parsed
        :type sentence: list(str)
        :rtype: DependencyGraph
        """
        ...
    
    def depgraph_to_glue(self, depgraph):
        ...
    
    def get_glue_dict(self):
        ...
    
    def gfl_to_compiled(self, gfl):
        ...
    
    def get_pos_tagger(self):
        ...
    


class DrtGlueFormula(GlueFormula):
    def __init__(self, meaning, glue, indices=...) -> None:
        ...
    
    def make_VariableExpression(self, name):
        ...
    
    def make_LambdaExpression(self, variable, term):
        ...
    


class DrtGlueDict(GlueDict):
    def get_GlueFormula_factory(self):
        ...
    


class DrtGlue(Glue):
    def __init__(self, semtype_file=..., remove_duplicates=..., depparser=..., verbose=...) -> None:
        ...
    
    def get_glue_dict(self):
        ...
    


def demo(show_example=...):
    ...

if __name__ == "__main__":
    ...
